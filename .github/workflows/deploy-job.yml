# Reusable Workflow - for build, publish jar and image to GitHub Packages
# --------------------------------------------------
# msa-rms以外のリポジトリからも呼びだれるためアクセス権は自リポジトリ権限の
# GITHUB_TOKENでなくPATを使っている
name: deploy-job

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      with_image:
        type: boolean
        default: false
      deploy_type:
        type: string
      aws_appname:
        type: string
    
defaults:
  run:
    working-directory: build

jobs:
  deploy_to_repo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.output_image_tag.outputs.image_tag }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        path: build

    # build jar and deploy steps
    - name: Set up JDK 17 for Package Registry
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        server-username: REPOSITORY_SERVER_USER
        server-password: REPOSITORY_SERVER_PASSWORD
        settings-path: ${{ github.workspace }}
    - name: Build jar and Publish to GitHub Packages
      env:
        REPOSITORY_SERVER_USER: ${{ secrets.REPOSITORY_SERVER_USER }}
        REPOSITORY_SERVER_PASSWORD: ${{ secrets.REPOSITORY_SERVER_PASSWORD }}
      run: mvn -B -Pcli,copy-libs deploy -DskipTests -s $GITHUB_WORKSPACE/settings.xml 

    # build image and push steps
    - if: inputs.with_image
      name: Set up JDK 17 for Container Registry
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: ghcr.io
        server-username: REPOSITORY_SERVER_USER
        server-password: REPOSITORY_SERVER_PASSWORD
        settings-path: ${{ github.workspace }}
    - if: inputs.with_image
      name: Prepare IMAGE_TAG
      run: echo "IMAGE_TAG=`git show --format='%H' --no-patch`" >> $GITHUB_ENV
    - if: inputs.with_image
      name: Build Image and Push to GitHub Packages
      env:
        REPOSITORY_SERVER_USER: ${{ secrets.REPOSITORY_SERVER_USER }}
        REPOSITORY_SERVER_PASSWORD: ${{ secrets.REPOSITORY_SERVER_PASSWORD }}
      run: |
        mvn -B \
          docker:build \
          docker:push \
          -Dimage.tag=$IMAGE_TAG \
          -DskipTests \
          -s $GITHUB_WORKSPACE/settings.xml 
    - if: inputs.with_image
      id: output_image_tag
      run: echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT 
  
  deploy_to_ec2:
    needs: deploy_to_repo
    if: ${{ inputs.deploy_type == 'ec2' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          path: build

      - name: configure aws credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/aws-identity-providers-federation-github-actions
          aws-region: ap-northeast-1
      - name: deploy to ec2 by codedeploy
        env:
          IMAGE_TAG: ${{ needs.deploy_to_repo.outputs.image_tag }}
        run: |
          mkdir ./deployment
          cp ./env/deployment/appspec.yml ./deployment
          cp ./env/deployment/logback-production.xml ./deployment
          cp -r ./env/deployment/scripts ./deployment
          echo $IMAGE_TAG > ./deployment/image_tag
          ZIP_NAME="deployment/${{ inputs.aws_appname }}-"`date "+%Y%m%d_%H%M%S"`.zip
          aws deploy push \
            --application-name ${{ inputs.aws_appname }} \
            --s3-location s3://rms-codedeploy-bucket/$ZIP_NAME \
            --ignore-hidden-files \
            --source ./deployment
          aws deploy create-deployment \
            --application-name ${{ inputs.aws_appname }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name ${{ inputs.aws_appname }}-deploy-group \
            --s3-location bucket=rms-codedeploy-bucket,bundleType=zip,key=$ZIP_NAME
