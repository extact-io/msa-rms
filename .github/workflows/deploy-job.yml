# Reusable Workflow - for build, publish jar and image to GitHub Packages
# --------------------------------------------------
# msa-rms以外のリポジトリからも呼びだれるためアクセス権は自リポジトリ権限の
# GITHUB_TOKENでなくPATを使っている
name: deploy-job

on:
  workflow_call:
    inputs:
      skip-test:
        required: true
        type: boolean
        default: false
      repo:
        required: true
        type: string
      with-image:
        type: boolean
        default: false
      deploy-type:
        type: string
      aws-appname:
        type: string
      ecs-taskname:
        type: string
      ecs-containername:
        type: string
      container-registry:
        type: string
        default: "ghcr.io"
      image-name:
        type: string
      ecs-servicename:
        type: string
      ecs-clustername:
        type: string
        default: "rms-service-cluster"

jobs:
  deploy_to_repo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.output_image_tag.outputs.image_tag }}
    defaults:
      run:
        working-directory: build
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        path: build

    # build jar and deploy steps
    - name: Set up JDK 17 for Package Registry
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        server-username: REPOSITORY_SERVER_USER
        server-password: REPOSITORY_SERVER_PASSWORD
        settings-path: ${{ github.workspace }}
    - name: Build jar and Publish to GitHub Packages
      env:
        REPOSITORY_SERVER_USER: ${{ secrets.REPOSITORY_SERVER_USER }}
        REPOSITORY_SERVER_PASSWORD: ${{ secrets.REPOSITORY_SERVER_PASSWORD }}
      run: mvn -B -Pcli,copy-libs deploy -DskipTests=${{ inputs.skip-test }} -s $GITHUB_WORKSPACE/settings.xml

    # build image and push steps
    - if: inputs.with-image
      name: Set up JDK 17 for Container Registry
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: ghcr.io
        server-username: REPOSITORY_SERVER_USER
        server-password: REPOSITORY_SERVER_PASSWORD
        settings-path: ${{ github.workspace }}
    - if: inputs.with-image
      name: Prepare IMAGE_TAG
      run: echo "IMAGE_TAG=`git show --format='%H' --no-patch`" >> $GITHUB_ENV
    - if: inputs.with-image
      name: Build Image and Push to GitHub Packages
      env:
        REPOSITORY_SERVER_USER: ${{ secrets.REPOSITORY_SERVER_USER }}
        REPOSITORY_SERVER_PASSWORD: ${{ secrets.REPOSITORY_SERVER_PASSWORD }}
      run: |
        mvn -B \
          docker:build \
          docker:push \
          -Dimage.tag=$IMAGE_TAG \
          -DskipTests \
          -s $GITHUB_WORKSPACE/settings.xml 
    - if: inputs.with-image
      id: output_image_tag
      run: echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT 

    - name: Output IMAGE_TAG to file
      run: git show --format='%H' --no-patch > image_tag
    - name: Upload build Artifact of IMAGE_TAG
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.ecs-containername }}-image_tag
        path: build/image_tag
        retention-days: 1

  deploy_to_ec2:
    needs: deploy_to_repo
    if: ${{ inputs.deploy-type == 'ec2' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: build
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        path: build
    - name: Download build Artifact of IMAGE_TAG
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.ecs-containername }}-image_tag
        path: download
    - name: Prepare IMAGE_TAG
      run: echo "IMAGE_TAG=`cat ./download/image_tag`" >> $GITHUB_ENV
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/aws-identity-providers-federation-github-actions
        aws-region: ap-northeast-1
    - name: deploy to ec2 by codedeploy
      run: |
        mkdir ./deployment
        cp ./env/deployment/appspec.yml ./deployment
        cp ./env/deployment/logback-production.xml ./deployment
        cp -r ./env/deployment/scripts ./deployment
        echo $IMAGE_TAG > ./deployment/image_tag
        ZIP_NAME="deployment/${{ inputs.aws-appname }}-"`date "+%Y%m%d_%H%M%S"`.zip
        aws deploy push \
          --application-name ${{ inputs.aws-appname }} \
          --s3-location s3://rms-codedeploy-bucket/$ZIP_NAME \
          --ignore-hidden-files \
          --source ./deployment
        aws deploy create-deployment \
          --application-name ${{ inputs.aws-appname }} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name ${{ inputs.aws-appname }}-deploy-group \
          --s3-location bucket=rms-codedeploy-bucket,bundleType=zip,key=$ZIP_NAME

  deploy_to_ecs:
    needs: deploy_to_repo
    if: ${{ inputs.deploy-type == 'ecs' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Download build Artifact of IMAGE_TAG
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.ecs-containername }}-image_tag
        path: download
    - name: Prepare IMAGE_TAG
      run: echo "IMAGE_TAG=`cat ./download/image_tag`" >> $GITHUB_ENV
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/aws-identity-providers-federation-github-actions
        aws-region: ap-northeast-1
    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ inputs.ecs-taskname }} \
          --query taskDefinition \
          > task-definition.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ inputs.ecs-containername }}
        image: ${{ inputs.container-registry }}/${{ inputs.image-name }}:${{ env.IMAGE_TAG }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.ecs-servicename }}
        cluster: ${{ inputs.ecs-clustername }}
        wait-for-service-stability: false